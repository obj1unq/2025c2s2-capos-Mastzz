import capos.*
describe "Parte 1.1" {
  test "Rolando comienza pelado" {
    assert.equals(0, rolando.inventario().cantidadDeItems())
    rolando.recolectar(espadaDelDestino)
    rolando.recolectar(libroDeHechizos)
    assert.equals(2, rolando.inventario().cantidadDeItems())
    rolando.recolectar(collarDivino)
    assert.notEquals(3, rolando.inventario().cantidadDeItems())
  }
}

describe "Parte 1.2" {
  method initialize(){
    rolando.inventario().capacidad(2)
    rolando.enCastillo(false)
  }
  test "Castillo vac√≠o y rolando sin items" {
    assert.equals(0, rolando.inventario().cantidadDeItems())
    assert.equals(0, castillo.cantidadDeItems())
  }
  test "Rolando recolecta 2 items y los guarda en el castillo" {
    rolando.recolectar(espadaDelDestino)
    rolando.recolectar(libroDeHechizos)
    assert.equals(2, rolando.inventario().cantidadDeItems())
    // no puede recolectar mas (capacidad 2)
    rolando.recolectar(collarDivino)
    assert.notEquals(3, rolando.inventario().cantidadDeItems())
    // pero se suma al historial
    assert.equals(3, rolando.cantidadHistorial())
    // no puede guardar los items si no esta en el castillo
    assert.notThat(rolando.enCastillo())
    rolando.guardarEnCastillo()
    assert.notEquals(0, rolando.inventario().cantidadDeItems())
    // ahora si
    rolando.entrarCastillo()
    assert.that(rolando.enCastillo())
    rolando.guardarEnCastillo()
    assert.equals(0, rolando.inventario().cantidadDeItems())
    assert.equals(2, castillo.cantidadDeItems())
    // no puede recolectar items en el castillo
    rolando.recolectar(collarDivino)
    assert.notEquals(1, rolando.inventario().cantidadDeItems())
    // ahora si
    rolando.salirCastillo()
    rolando.recolectar(collarDivino)
    rolando.entrarCastillo()
    rolando.guardarEnCastillo()
    assert.equals(0, rolando.inventario().cantidadDeItems())
    assert.equals(3, castillo.cantidadDeItems())
  }
}